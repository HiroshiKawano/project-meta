package com.meta.db;

import java.io.File;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;

@Controller
public class JacksonTest{

	@Autowired SearchHistoryDB shDB;
	@Autowired SearchHistoryRepository shRepository;
	@Autowired BookSearchRepository bsRepository;
	//@Autowired BookSearchList bsList;

	private ObjectMapper mappter = new ObjectMapper();

	@RequestMapping(value="/json_to_object")
    public String jackson_test(Model model) throws Exception{
		TestObj obj = new TestObj();
		obj.setA("abc");
		obj.setB(123);
		obj.setC(new String[]{"a","b","c"});
		String json = mappter.writeValueAsString(obj);
		model.addAttribute("json", json);
    	return "json.html";
    }

	@RequestMapping(value="/object_to_json")
    public String jackson_test2(Model model) throws Exception{
		File file = new File("./target/classes/static/test.js");
		TestObj obj = mappter.readValue(file, TestObj.class);
		System.out.println(obj.getA());
		System.out.println(obj.getB());
		String json = mappter.writeValueAsString(obj);
		model.addAttribute("json", json);
    	return "json.html";
    }

	@RequestMapping(value="/abc", method=RequestMethod.POST)
	public String abc(
			@RequestParam(value="book_title",required=false) String title,
			@RequestParam(value="book_isbn10",required=false) String isbn10,
			@RequestParam(value="book_isbn13",required=false) String isbn13,
			@ModelAttribute(value="shDB")SearchHistoryDB shDB,
			@ModelAttribute(value="bsList")BookSearchList bsList,
			Model model
			) throws Exception {
		System.out.println(title);
		System.out.println(isbn10);
		System.out.println(isbn13);
		//bookapi.html上にタイトルとISBNを表示
		model.addAttribute("title",title);
		model.addAttribute("isbn10",isbn10);
		model.addAttribute("isbn13",isbn13);

		String isbn = isbn13;
		isbn13 = isbn10;
		isbn10 = isbn;

		shDB.setTitle(title);
		shDB.setIsbn(isbn);

		shRepository.saveAndFlush(shDB);

		BookService BService = new BookService();
		BookXML bookXML = BService.service(isbn);
		System.out.println("ここです" + BService.service(isbn));

		bsRepository.deleteAll();
		for(int i = 0 ; i < bookXML.getBooklist().get(0).getBs().getLibkeys().get(0).getLibStatus().length(); i++ ) {
			//IDをループで自動連番
			try {
			Optional<String> libStatus = Optional.ofNullable(
					bookXML.getBooklist().get(0).getBs().getLibkeys().get(i).getLibStatus());
			Optional<String> libName = Optional.ofNullable(
					bookXML.getBooklist().get(0).getBs().getLibkeys().get(i).getLibName());
			bsList.setId(i+1);
			bsList.setLibkey(libStatus.get());
			bsList.setLending(libName.get());
			bsRepository.saveAndFlush(bsList);
			}catch(NullPointerException e){
				e.printStackTrace();
			}
			if(bookXML.getCon().equals("1")) {
				bookXML = BService.service(isbn);
			}
		}
		return "bookapi.html";
	}
}
